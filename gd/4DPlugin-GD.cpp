/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-GD.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : GD
 #	author : miyako
 #	2023/08/14
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-GD.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- GD
            
			case 1 :
				imagefrompicture(params);
				break;
			case 2 :
				imagetopicture(params);
				break;
			case 3 :
				imageresolution(params);
				break;
			case 4 :
				imagecolorresolve(params);
				break;
			case 5 :
				imagecolorat(params);
				break;
			case 6 :
				imageantialias(params);
				break;
			case 7 :
				imagegammacorrect(params);
				break;
			case 8 :
				imageflip(params);
				break;
			case 9 :
				imagecrop(params);
				break;
			case 10 :
				imagesetpixel(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

static gdImagePtr _imagetopicture(PA_Picture p) {
    
    gdImagePtr imagePtr = NULL;
    
    if(p) {
                
        PA_Handle h = PA_NewHandle(0);
        
        PA_ErrorCode err = eER_NoErr;
        
        PA_long32 i = 0;
        
        while (err == eER_NoErr)
        {
            PA_Unistring type = PA_GetPictureData(p, ++i, NULL);
            err = PA_GetLastError();
            
            if(err == eER_NoErr)
            {
                PA_long32 len;
                
                len = (uint32_t)(type.fLength * 4) + sizeof(uint8_t);
                std::vector<uint8_t> buf(len);
                
                PA_ConvertCharsetToCharset(
                                           (char *)type.fString,
                                           type.fLength * sizeof(PA_Unichar),
                                           eVTC_UTF_16,
                                           (char *)&buf[0],
                                           len,
                                           eVTC_UTF_8
                                           );
                CUTF8String uti;
                uti = CUTF8String((const uint8_t *)&buf[0]);
                CUTF8String typestring;
                
                size_t pos, found;
                found = 0;
                
                for(pos = uti.find(';'); pos != CUTF8String::npos; pos = uti.find(';', found))
                {
                    typestring = uti.substr(found, pos-found);
                    found = pos + 1;
                }
                
                typestring = uti.substr(found, uti.length()-found);
              
                if(CUTF8String((const uint8_t *)".gd") == typestring) {
                    PA_GetPictureData(p, 1, h);
                    
                    if(PA_GetLastError() == eER_NoErr)
                    {
                        imagePtr = gdImageCreateFromGd2Ptr(PA_GetHandleSize(h), PA_LockHandle(h));
                        PA_UnlockHandle(h);
                    }
                }
            }
        }
    }
    
    return imagePtr;
}

static PA_Picture _imagetopicture(gdImagePtr imagePtr) {
    
    PA_Picture p = NULL;
    
    if(imagePtr) {
        
        int len = 0;
        void *bytes = NULL;
        
        bytes = gdImageGd2Ptr(imagePtr, GD2_CHUNKSIZE_MAX, GD2_FMT_RAW, &len);
        
        if(bytes) {
            
            PA_Variable args[3];
            args[0] = PA_CreateVariable(eVK_Blob);
            args[1] = PA_CreateVariable(eVK_Picture);
            args[2] = PA_CreateVariable(eVK_Unistring);
            PA_Unistring ustr = PA_CreateUnistring((PA_Unichar *)".\0g\0d\0\0\0");
            PA_SetStringVariable(&args[2], &ustr);
            PA_SetBlobVariable(&args[0], bytes, len);
            p = PA_CreatePicture((void *)"", 0);
            PA_SetPictureVariable(&args[1], p);

            PA_ExecuteCommandByID(682, args, 3);

            p = PA_DuplicatePicture(PA_GetPictureVariable(args[1]), 1);
            
            PA_ClearVariable(&args[0]);
            PA_ClearVariable(&args[1]);
            PA_ClearVariable(&args[2]);
            
            gdFree(bytes);
        }
    }
    
    return p;
}

static void imagefrompicture(PA_PluginParameters params) {

    PA_ObjectRef returnValue = PA_CreateObject();
    
    ob_set_b(returnValue, L"success", false);
    
    PA_Picture p = PA_GetPictureParameter(params, 1);
    IMG_PNG_T format = (IMG_PNG_T)PA_GetLongParameter(params, 2);
    
    gdImagePtr imagePtr = NULL;
    
    if(p) {
        PA_Handle h = PA_NewHandle(0);
        
        PA_ErrorCode err = eER_NoErr;
        PA_GetPictureData(p, 1, h);
        err = PA_GetLastError();
        
        if(err == eER_NoErr)
        {
            switch (format) {
                case IMG_BMP:
                    imagePtr = gdImageCreateFromBmpPtr(PA_GetHandleSize(h), PA_LockHandle(h));
                    PA_UnlockHandle(h);
                    break;
                case IMG_GIF:
                    imagePtr = gdImageCreateFromGifPtr(PA_GetHandleSize(h), PA_LockHandle(h));
                    PA_UnlockHandle(h);
                    break;
                case IMG_JPEG:
                    imagePtr = gdImageCreateFromJpegPtr(PA_GetHandleSize(h), PA_LockHandle(h));
                    PA_UnlockHandle(h);
                    break;
                case IMG_TIFF:
                    imagePtr = gdImageCreateFromTiffPtr(PA_GetHandleSize(h), PA_LockHandle(h));
                    PA_UnlockHandle(h);
                    break;
                case IMG_WBMP:
                    imagePtr = gdImageCreateFromWBMPPtr(PA_GetHandleSize(h), PA_LockHandle(h));
                    PA_UnlockHandle(h);
                    break;
                case IMG_WEBP:
                    imagePtr = gdImageCreateFromWebpPtr(PA_GetHandleSize(h), PA_LockHandle(h));
                    PA_UnlockHandle(h);
                    break;
                case IMG_PNG:
                default:
                    imagePtr = gdImageCreateFromPngPtr(PA_GetHandleSize(h), PA_LockHandle(h));
                    PA_UnlockHandle(h);
                    break;
            }
        }
    }
    
    if(imagePtr) {
       
        PA_Picture p = _imagetopicture(imagePtr);
        
        if(p) {
            ob_set_p(returnValue, L"image", p);
            ob_set_b(returnValue, L"success", true);
        }
    }
    
    PA_ReturnObject(params, returnValue);
}

static void imagetopicture(PA_PluginParameters params) {

    PA_ObjectRef returnValue = PA_CreateObject();
    
    ob_set_b(returnValue, L"success", false);
    
    PA_Picture p = PA_GetPictureParameter(params, 1);
    IMG_PNG_T format = (IMG_PNG_T)PA_GetLongParameter(params, 2);
    
    gdImagePtr imagePtr = _imagetopicture(p);
    
    if(imagePtr) {
        
        int len = 0;
        void *bytes = NULL;
       
        switch (format) {
            case IMG_BMP:
                bytes = gdImageBmpPtr(imagePtr, &len, -1);
                if(bytes) {
                    ob_set_p(returnValue, L"image", PA_CreatePicture(bytes, len));
                    ob_set_b(returnValue, L"success", true);
                    gdFree(bytes);
                }
                break;
            case IMG_GIF:
                bytes = gdImageGifPtr(imagePtr, &len);
                if(bytes) {
                    ob_set_p(returnValue, L"image", PA_CreatePicture(bytes, len));
                    ob_set_b(returnValue, L"success", true);
                    gdFree(bytes);
                }
                break;
            case IMG_JPEG:
                bytes = gdImageJpegPtr(imagePtr, &len, 100);
                if(bytes) {
                    ob_set_p(returnValue, L"image", PA_CreatePicture(bytes, len));
                    ob_set_b(returnValue, L"success", true);
                    gdFree(bytes);
                }
                break;
            case IMG_TIFF:
                bytes = gdImageTiffPtr(imagePtr, &len);
                if(bytes) {
                    ob_set_p(returnValue, L"image", PA_CreatePicture(bytes, len));
                    ob_set_b(returnValue, L"success", true);
                    gdFree(bytes);
                }
                break;
                /*
            case IMG_WBMP:
                bytes = gdImageWBMPPtr(imagePtr, &len, 0);
                if(bytes) {
                    ob_set_p(returnValue, L"image", PA_CreatePicture(bytes, len));
                    ob_set_b(returnValue, L"success", true);
                    gdFree(bytes);
                }
                break;
            case IMG_WEBP:
                bytes = gdImageWebpPtr(imagePtr, &len);
                if(bytes) {
                    ob_set_p(returnValue, L"image", PA_CreatePicture(bytes, len));
                    ob_set_b(returnValue, L"success", true);
                    gdFree(bytes);
                }
                break;
                 */
            case IMG_PNG:
            default:
                bytes = gdImagePngPtr(imagePtr, &len);
                if(bytes) {
                    ob_set_p(returnValue, L"image", PA_CreatePicture(bytes, len));
                    ob_set_b(returnValue, L"success", true);
                    gdFree(bytes);
                }
                break;
        }
    }
 
    PA_ReturnObject(params, returnValue);
}

void imageresolution(PA_PluginParameters params) {

}

void imagecolorresolve(PA_PluginParameters params) {

}

void imagecolorat(PA_PluginParameters params) {

}

void imageantialias(PA_PluginParameters params) {

}

void imagegammacorrect(PA_PluginParameters params) {

}

void imageflip(PA_PluginParameters params) {

}

void imagecrop(PA_PluginParameters params) {

}

void imagesetpixel(PA_PluginParameters params) {

}

